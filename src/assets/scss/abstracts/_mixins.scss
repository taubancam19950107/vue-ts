// mixin
//

//------------------------------------| CSS Triangle |------------------------------------
// used for creating CSS only triangles
// example:
// .element {
//   &::before {
//     @include css-triangle(blue, down);
//   }
// }
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  @include pseudo($pos: $position);

  width: 0;
  height: 0;

  @if $round {
    border-radius: 3px;
  }

  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  }

  @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  }

  @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  }

  @else if  $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

// Max text
@mixin truncate($truncation-boundary) {
  max-width: #{$truncation-boundary}px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Color contrast
@function color-yiq($color, $dark: $color-black, $light: $color-white) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $dark;
  }

  @else {
    @return $light;
  }
}

// Position
@mixin position($value) {
  position: $value !important;
}
